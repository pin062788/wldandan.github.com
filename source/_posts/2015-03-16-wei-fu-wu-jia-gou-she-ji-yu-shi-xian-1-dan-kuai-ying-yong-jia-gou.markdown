---
layout: post
title: "微服务架构设计与实现(1)"
date: 2015-03-16 22:07
comments: true
categories: MicroService
---
[请勿转载]

#架构模式的发展与单块架构存在的弊端


### 概述

多年来，我们一直在技术的浪潮中乘风破浪，扬帆奋进，寻找更优秀的方法来构建IT系统，也一直在积极的学习并观察先进的公司如何以不同的架构方式构建或者优化其IT系统，来积极应对市场的变化，迅速做出响应，从而为客户提供更多的价值。

微服务架构模式（Microservice Architect Pattern）是近两年在软件架构模式领域里出现的一个新名词。虽然其诞生的时间不长，但其在各种演讲、文章、书籍上所出现的频率已经让很多人意识到它对软件领域所带来的影响。那到底什么是微服务，当我们谈论微服务时，它代表着一种什么样的含义？微服务适合应用在什么场景下，以及它有什么样的优缺点？微服务和SOA到底有没有区别？在接下来的几章里，我将为大家揭开微服务的神秘面纱。

<!-- More -->

###架构模式发展简史


为了更好的理解微服务架构，让我们先来回顾一下WEB开发架构模式的发展历程。

曾经，当我们开发WEB系统的时候，最简单的实现方案就是用HTML实现几个静态页面，然后相互之间配置好跳转的链接，放在服务器上，就可以作为一个简单的WEB系统为用户提供信息了。随后，由于要处理用户的数据，如添加、删除、修改、显示等，于是系统需要使用数据库、文件或者其他一些存储介质来存储数据，为了区别Client/Server模式的应用，我们称之为Browser/Server系统。随着信息化行业的快速发展以及B/S系统天生的易部署、易升级性，B/S系统的应用也愈加广泛，市场也有了更多的需求，譬如电子商务平台，以及传统的办公自动化平台或者各种企业信息化管理平台都在从C/S转向B/S。

以电子商务平台为例，其功能在业务发展的过程中也逐步完善，譬如有了用户验证、有了购物车，支持了评论、在线支付、货到付款等。但大部分的时候，所有的业务逻辑都交织在一起，错综复杂，为了使系统有个良好的架构并降低维护成本，架构师以及开发者们通过使用面向对象分析、设计模式、企业架构模式等方式将不同的业务模块进行划分，同时引入分层的方式将不同职责的部分放在不同的层，于是，经典的三层架构出现了。

####三层架构

   三层架构是一种架构模式，它是从应用架构的角度对应用程序进行分层，通常包括数据访问层，业务逻辑层以及表示层。数
据访问层主要关注对原始数据（数据库或者文本文件等存放数据的形式）的操作。也就是说，它关注的是应用程序是如何有效的将数据存储到数据库、文件系统或者其他存储介质中。有一点要注意的是，它关心的是对原始数据的操作，而非原始数据的存储介质本身。譬如，在电子商务平台中，商品的信息是如何存储及获取的，图片的信息是如何存储以及获取的等；业务逻辑层则主要聚焦应用程序对业务问题的逻辑处理，以及业务流程的操作。譬如，在电子商务平台中，当用户购买商品后，应用程序如何对订单进行处理，如何决定订单的折扣、配送方式等；表示层则主要负责为用户提供用户接口部分（UI），譬如如何帮助用户使用系统，如何接受用户的请求，如何为用户提供数据展示等。目前的用户接口大部分情况下为WEB方式，当然也可以是传统桌面软件的形式，例如.NET的WINFORM或者Java的SWING，以及其他客户端的方式。

   三层架构的出现，一方面是为了解决应用程序中代码间调用复杂、代码职责不清的问题。其通过在各层间定义接口，并将接
口与实现分离，可以很容易的用不同的实现来替换原有层次的实现，从而有效降低层与层之间的依赖。这种方式不仅有利于帮助团队理解整个应用架构，降低后期维护成本，同时也有利于制定整个应用程序架构的标准。另一方面，三层结构的出现从某种程度上也解决了企业内部如何有效的根据技能调配人员，提高生产效率的问题。在大环境下，有效的分层能使不同职责的人员各司其职，更聚焦与个人专业技能的发展和培养。三层结构的出现不仅标准化了复杂系统的逻辑划分，更帮助企业解决了如何有效形成技术人员组织结构的问题，因此在很长的一段时间里，它一直是软件架构的经典模式之一。

####单块架构应用

   前面提到过，三层架构并不是物理上的三层，而是应用架构的逻辑上的三层。这也就意味着即便我们将应用架构分成了三
层，但分层的代码最终在物理上还是会被部署并运行在同一个服务器节点中。也就是说，所有的代码在经历过编译、打包、部署后，最终还是都运行在同一个机器的同一个进程中。对于这种功能集中、代码库中心化、部署后运行在同一进程的应用程序，我们通常称之为单块架构应用。

#####纵向扩展

#####水平扩展

   随着最近十年互联网行业的迅猛发展，随着公司或者组织业务的不断扩张，应用程序面临了新一轮的挑战。譬如，如何为
用户提供更可靠的服务，如何处理用户增多后导致并发请求数增多的问题，以及如何解决用户增多后带来的大数据量的问题。这些问题的出现，使得部署在单节点上的应用已经没法满足日益增长的需求，因此越来越多的单块架构应用面临着如何进行有效的水平扩展(Scale Out)。当我们考虑对应用程序水平扩展时，通常的做法是建立一个集群，通过在集群中不断的添加新节点，然后借助前端的负载均衡器，将用户的请求按照某种算法，譬如轮转法、散列法或者最小连接法等合理的将请求分配到不同的节点上。当然，如果某些节点保持状态，如用户登陆后的会话信息等，则增加了水平扩展的难度。

####单块架构应用的弊端

   随着业务的不断扩大，需求不断的增加，越来越多的人加入开发团队，同时代码库也在急剧膨胀。在这种情况
下，代码的可维护性、扩展性、灵活性在降低，而测试成本、构建成本以及维护成本却在显著增加。因此，随着项目或者产品规模的继续扩大，单块架构应用开始呈现越来越多的弊端。

#####1.维护成本增加

   随着应用程序的功能越来越多，团队越来越大，代码也变得越来越复杂，难以维护。譬如说，对于使用Java编写的中型应用
而言，当代码量为几十万行时，可能只需要10人左右的团队，缺陷的平均修复周期一般在2周左右。当代码量上升到百万行级别时，可能需要接近百人左右的团队，随着人员增多的同时，沟通成本也显著增加，提交代码、编译过程、构建打包、自动化测试等过程所花费的时间都会显著增高；另外，对于分析缺陷、定位缺陷、修复缺陷的成本都会相应增高。因此，这时候缺陷的平均修复周期可能变成2个月。另外，随着代码量的增大，在开发人员对全局功能缺乏深度理解的情况下，修复完一个缺陷，还有可能引入其他缺陷，在自动化测试机制不完善的情况下，很可能导致缺陷修复的过程陷入“越修越多”的恶性循环。

#####2.新人培养周期长

   随着应用程序的功能越来越多，代码变得越来越复杂的同时，对于新加入团队的成员而言，了解行业背景、熟悉应用程序业
务、配置本地开发环境，这些看似简单的任务，将会花费更长的时间。我曾经有个朋友，在加入一家世界500强的知名IT公司后，被安排到了一个百万级代码的产品组里。他花了将近1个月的时间来熟悉产品文档、配置开发环境后，才在本地成功的运行起了这个应用。在他换工作后的头一个月里，我问他好几次工作进展，得到的答案都是一样，“看文档，装环境”。对个人而言，花一个月时间来配置本地开发环境，其中的滋味和感受大家可想而知，我估计人世间比这更痛苦的事情也没几件了；而对公司或者部门而言，本期望员工花费数天就能配置好的环境，却花了一个月才能完成，这更是极大的浪费。更有甚者，在第一次配置完开发环境后，好几年都不愿意再升级或者重装系统，真是一招被蛇咬，十年怕井绳。

	
#####3.对集成开发环境要求高
	
   代码库越庞大，依赖越多，对开发环境的性能要求就越高。十年前，当我刚工作时，编写Java代码所使用的笔记本，一般配
置都是2G内存，当时使用Eclipse加载一个中等类型的应用（大概10万行代码量的样子），觉得就挺吃力，于是一直希望公司给我升级内存。但现在，虽然笔记本的内存在不断升级，已增加到16G或者更高，但貌似大型的应用系统也越来越多，其对环境的依赖也越来越复杂。尤其是现在有些复杂的业务系统，通常不仅需要安装数据库，WEB容器、还需要安装中间件服务器、消息队列等。因此，随着应用系统的代码库愈发庞大，功能越多，集成开发环境在加载、编译整个应用程序代码的过程中，耗时也变得越来越长。


#####4.应用程序扩展困难

   此外，因为所有程序代码都运行在服务器上的相同进程中，导致应用程序的扩展非常困难。如果应用程序某部分的功能是内
存密集型的，譬如需要缓存大量数据，而另外一部分功能是CPU密集型的，譬如需要进行大量的运算，那么运行该应用的服务器必须有足够的内存和强劲的CPU来满足该应用系统的需求。因此，鉴于每个服务器都要提供该应用系统所需要的各种资源，基础设施的整体花费可能会非常高。


#####5.对团队结构的影响

   最后，非常微妙的是，随着应用程序的功能越来越多，代码变得越来越复杂，其分层的结构组成也会逐渐映射到研发团队的
结构上。例如，用户体验工程师（UX）更专注负责用户接口部分，业务层开发者则负责建立服务器后端的业务逻辑，数据库工程师和DBA们更关注数据访问组件和数据库。鉴于这些问题，随着时间的推移，不仅代码越来越难以管理，其对团队结构的影响也越来越明显。

综上所述，随着业务的不断扩大，需求的持续增加，单块应用架构已经很难满足业务快速变化的需要。一方面，代码的可维护性、扩展性、灵活性在降低；而另一方面，系统的测试成本、构建成本以及维护成本却在显著增加。因此，随着项目或者产品规模的不断扩大，单块架构应用的改造与重构势在必行。

