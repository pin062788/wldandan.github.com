---
layout: post
title: "微服务架构设计与实现(1)"
date: 2015-03-16 22:07
comments: true
categories: MicroService
---
[请勿转载]

#单块应用架构以及其面临的挑战


### 概述

多年来，我们一直在技术的浪潮中乘风破浪，扬帆奋进，寻找更优秀的方法来构建IT系统，也一直在积极的学习并观察先进的公司如何以不同的架构方式构建或者优化其IT系统，来积极应对市场的变化，迅速做出响应，从而为客户提供更多的价值。

微服务架构模式（Microservice Architect Pattern）是近两年在软件架构模式领域里出现的一个新名词。虽然其诞生的时间不长，但其在各种演讲、文章、书籍上所出现的频率已经让很多人意识到它对软件领域所带来的影响。那到底什么是微服务，当我们谈论微服务时，它代表着一种什么样的含义？微服务适合应用在什么场景下，以及它有什么样的优缺点？微服务和SOA到底有没有区别？在接下来的几章里，我将为大家揭开微服务的神秘面纱。

<!-- More -->

### 软件三层架构

#### 什么是“层”
   现实生活中，“层”这个字的含义，对大家一点都不陌生。我们经常说楼房高多少层，蛋糕有几层等。通常来说，层有好几种
定义，但其中最耳熟能详的，莫过于“层”能帮助我们划分出构成某整体事物的，上下相互支撑的的不同部分。譬如说，我们喜欢吃的蛋糕，一般是由三层组成，第一层的蛋糕体、第二层的奶油，和第三层的水果或者其他等构成。从顶部至底部，每一层依赖于下一层，从底部到顶部，每一层又支撑着上一层。

   在软件架构模式的领域，经过多年的发展，也有了层的概念：

   * 每层应该能够被单独的构造；
   * 每层都具有区别于其他层的显著特点；
   * 层与层之间能够互相连接、互相支撑、互相作用，构成一个整体。
   * 层的内部，可以被替换成其他可工作的部分，并对整体的影响不大。


#### 软件架构中的三层

对于任何的软件系统，其构建目标都是为了满足某类用户的需求，为用户传递价值。随着面向对象分析与设计理论、设计模式、企业架构模式等方法论的不断发展，从为用户提供功能、以及有效组织软件结构的角度考虑，软件中不同职责的部分逐渐被定义在了不同的层次，每一层负责的部分更趋向于具体化，细致化，于是软件的三层架构逐渐出现了。

- 表示层

   表示层部分通常指当用户使用软件时，看见的、听见的、输入的或者交互的部分。譬如，有可能是信息的显示，音乐的的播
放或者可以输入的文本框，单选按钮以及可点击的按钮等。通过这些元素，用户同软件进行交互并获取期望的价值。目前的用户接口大部分情况下为WEB方式，当然也可以是桌面软件的形式，例如. NET的WINFORM或者Java的SWING。

- 业务逻辑层

   业务逻辑部分是根据用户输入的信息，进行逻辑计算或者业务处理的部分。业务逻辑层则主要聚焦应用程序对业务问题的逻
辑处理，以及业务流程的操作，它是大部分软件系统区别与其他系统的核心。譬如，当用户点击一个按钮后，它可能会触发业务逻辑部分的代码进行运算，生成用户期望的结果。举例来说，在一个电子商务平台中，作为用户，当我们下单购买某个商品后，应用程序的业务逻辑层会对订单如何进行处理，如何计算折扣、如何配送等进行处理。

- 数据访问层

  在用户同软件系统交互的过程中，会产生数据。这类数据需要通过某种机制被有效的保存，并在将来能够被重复使用，或者
提供给其他系统。这种机制或者方法就是数据访问层最关注的部分。也就是说，它关注的是应用程序是如何有效的将数据存储到数据库、文件系统或者其他存储介质中。有一点要注意的是，它关心的是对原始数据的操作（数据库或者文本文件等存放数据的形式），而非原始数据的存储介质本身。譬如，在一个电子商务平台中，商品的信息是如何存储，图片的信息是如何获取的等。


   三层架构的出现，一方面是为了解决应用程序中代码间调用复杂、代码职责不清的问题。其通过在各层间定义接口，并将接
口与实现分离，可以很容易的用不同的实现来替换原有层次的实现，从而有效降低层与层之间的依赖。这种方式不仅有利于帮助团队理解整个应用架构，降低后期维护成本，同时也有利于制定整个应用程序架构的标准。

   另一方面，三层结构的出现从某种程度上也解决了企业内部如何有效的根据技能调配人员，提高生产效率的问题。在大环境
下，有效的分层能使不同职责的人员各司其职，更聚焦与个人专业技能的发展和培养。三层结构的出现不仅标准化了复杂系统的逻辑划分，更帮助企业解决了如何有效形成技术人员组织结构的问题，因此在很长的一段时间里，它一直是软件架构的经典模式之一。


#### 什么不是软件的三层架构？

##### 过渡的架构

   在WEB开发的早期，由于受到面向过程的思维以及设计方式的影响，所有的逻辑代码都被实现到一起，没有分层，也很难找
到每个区域之间的边界责任，代码之间互相交错，这就是我们通常提到的一层架构。

<img src="http://www.tonymarston.net/php-mysql/3-tier-architecture-004.png" />

   随着JAVA，.NET等高级语言的快速发展，这些语言为开发者提供了越来越方便的的数据访问库。这时候，数据访
问部分的代码逐渐有了清晰的结构，但表示逻辑和业务逻辑依然交织，我们称这个阶段为二层架构。

<img src="http://www.tonymarston.net/php-mysql/infrastructure-02.png" />


   随着软件架构设计方式的不断更替和面向对象语言的快速发展，一层和二层架构只是经历了短暂的时期，便消失在软件架构
发展的历史长河中。

##### 非应用本身的三层架构

有些人认为，对于一个WEB应用程序，其被自动地分成了3层，因为它有3个分离的部件，如图所示：

<img src="http://www.tonymarston.net/php-mysql/infrastructure-faq-06.png" />


   这三个部分看起来虽然满足“层”的概念，但它并不是我们所说的软件架构的层。就像我们所说的奶油蛋糕，我们可以在蛋糕
的底部加上稳固的底座，在蛋糕的外部加上漂亮的包装盒，但仔细想想，底座可以用不同品牌的底座，可以用纸质材料的，也可以用树脂材料的；包装盒可以用红色的一次性纸袋，也可以用蓝色的带着花纹的铁盒，它们并不是我们蛋糕本身所必需的一部分。

   浏览器可以独立存在与WEB应用程序之外，WEB应用程序也可以被不同的浏览器访问，因此浏览器不是WEB应用程序的部分
。虽然最近几年，在浏览器端，我们可以使用很多JavaScript库或者框架独立开发前端应用，但它的范畴超出了我们目前讨论的三层架构，更多的属于富客户端以及前后端分离的应用。

   类似的，数据库服务器也可以独立存在于应用程序之外，因此它也不是应用程序的一部分。虽然有些应用程序的逻辑代码，
被设计成必须是在数据库中运行，例如存储过程或者触发器，但这种用法完全是可选的，而且并不推荐这么使用，因为大大增加了后期维护的复杂度和数据迁移的成本。

##### MVC模式

   待补充！！

#### 三层架构的优点

   三层架构的最大优点，在于将应用程序的组成分成了从上至下的三个具有特定边界的部分，每个部分通过定义公共的接口，
并实现特定的逻辑，完全不必担心对其他层产生影响。

<img src="http://www.tonymarston.net/php-mysql/3-tier-architecture-005.png" />

除此之外，三层架构的优点还包括：

- 灵活性

   通过将应用程序的表现逻辑与业务逻辑分离，使应用程序在表示层的变化更加灵活，的成本也更低。

- 隔离性

   在定义好接口后，如改变某一个层内部的实现，对其他层的影响非常小。通过在各层间定义接口，并将接口与实现分离，可
以很容易的用不同的实现来替换原有层次的实现，从而有效降低层与层之间的依赖。

- 易维护性

   通过对应用的逻辑分层，有利于团队理解整个应用架构，降低后期维护成本，同时也有利于制定企业内部应用程序架构的结
构标准。另外，三层架构的出现从某种程度上也解决了企业内部如何有效的根据技能调配人员，提高生产效率的问题。譬如，负责表示层的开发团队更关心表示层的技能储备，像HTML、CSS或者Javascript等前端技术；而业务层的开发团队可以深度研究Java、JVM或者相关语言；数据访问层的专家则可以专性能提高数据库使用的专业水平以及性能调优等。
   
   
   三层架构的出现，一方面是为了解决应用程序中代码间调用复杂、代码职责不清的问题。另一方面，三层结构的出现从某种
程度上也解决了企业内部如何有效的根据技能调配人员，提高生产效率的问题。在大环境下，有效的分层能使不同职责的人员各司其职，更聚焦与个人专业技能的发展和培养。因此，三层结构的出现不仅标准化了复杂应用系统的逻辑划分，更帮助企业解决了如何有效形成以技术组织结构的问题，因此在很长的一段时间里，它一直是软件架构经典且有效的模式之一。


### 单块架构应用

#### 什么是单块架构应用

   前面提到过，三层架构并不是物理上的三层，而是应用架构在逻辑上分的三层。这也就意味着即便我们将应用架构分成了三
层，但分层的代码最终在物理上还是会被部署并运行在同一个服务器节点中。也就是说，所有的代码在经历过编译、打包、部署后，最终还是都运行在同一个机器的同一个进程中。对于这种功能集中、代码库中心化、部署后运行在同一进程的应用程序，我们通常称之为单块架构应用。

   典型的单块架构应用如Java中的WAR包或者Rails应用。譬如，Java的单块架构应用程序将由一个WAR文件组成，并且运
行在一个web容器中，如Tomcat。Rails的单块架构应用可能会由一个具有一定层级结构的目录组成，部署时候也使用该目录，比如使用Phusion Passenger部署在Apache/Nginx，或者使用JRuby部署在Tomcat。


#### 单块架构应用的优势
   
   单块架构的应用程序非常容易开发，因为IDE及其它开发工具都适合开发单个应用程序。这些程序也很容易被测试，你只需
启动一个进程即可。类似的，单块架构的应用程序也比较容易部署，因为你只需复制一个软件包或者一个目录到服务器相应的位置即可。


#### 单块架构面临的挑战
   
   随着最近几年互联网行业的迅猛发展，随着业务的不断扩大，用户的不断增加，单块架构应用面临着如何有效扩展的问题。
例如，如何为终端用户提供更可靠的服务，如何处理用户增多后导致并发请求数增多的问题，以及如何解决用户增多后带来的大数据量的问题等。另外一方面，随着公司或者组织业务的不断扩张，需求不断的增加，越来越多的人加入开发团队，代码库也在急剧膨胀。在这种情况下，单块架构的可维护性、灵活性在降低，而测试成本、构建成本以及维护成本却在显著增加。因此，随着项目或者产品规模的继续扩大，单块架构应用开始面临越来越多的挑战。


##### 1.维护成本增加

   随着应用程序的功能越来越多，团队越来越大，代码也变得越来越复杂，难以维护。譬如说，对于使用Java编写的中型应
用而言，当代码量为几十万行时，可能只需要10人左右的团队，缺陷的平均修复周期一般在2周左右。当代码量上升到百万行级别时，可能需要接近百人左右的团队，随着人员增多的同时，沟通成本也显著增加，提交代码、编译过程、构建打包、自动化测试等过程所花费的时间都会显著增高；另外，对于分析缺陷、定位缺陷、修复缺陷的成本都会相应增高。因此，这时候缺陷的平均修复周期可能变成2个月。另外，随着代码量的增大，在开发人员对全局功能缺乏深度理解的情况下，修复完一个缺陷，还有可能引入其他缺陷，在自动化测试机制不完善的情况下，很可能导致缺陷修复的过程陷入“越修越多”的恶性循环。

##### 2.新人培养周期长

   随着应用程序的功能越来越多，代码变得越来越复杂的同时，对于新加入团队的成员而言，了解行业背景、熟悉应用程序业
务、配置本地开发环境，这些看似简单的任务，将会花费更长的时间。我曾经有个朋友，在加入一家世界500强的知名IT公司后，被安排到了一个百万级代码的产品组里。他花了将近1个月的时间来熟悉产品文档、配置开发环境后，才在本地成功的运行起了这个应用。在他换工作后的头一个月里，我问他好几次工作进展，得到的答案都是一样，“看文档，装环境”。对个人而言，花一个月时间来配置本地开发环境，其中的滋味和感受大家可想而知，我估计人世间比这更痛苦的事情也没几件了；而对公司或者部门而言，本期望员工花费数天就能配置好的环境，却花了一个月才能完成，这更是极大的浪费。更有甚者，在第一次配置完开发环境后，好几年都不愿意再升级或者重装系统，真是一招被蛇咬，十年怕井绳。

	
##### 3.对集成开发环境要求高
	
   代码库越庞大，依赖越多，对开发环境的性能要求就越高。十年前，当我刚工作时，编写Java代码所使用的笔记本，一般
配置都是2G内存，当时使用Eclipse加载一个中等类型的应用（大概10万行代码量的样子），觉得就挺吃力，于是一直希望公司给我升级内存。但现在，虽然笔记本的内存在不断升级，已增加到16G或者更高，但貌似大型的应用系统也越来越多，其对环境的依赖也越来越复杂。尤其是现在有些复杂的业务系统，通常不仅需要安装数据库，WEB容器、还需要安装中间件服务器、消息队列等。因此，随着应用系统的代码库愈发庞大，功能越多，集成开发环境在加载、编译整个应用程序代码的过程中，耗时也变得越来越长。

##### 4.灵活性差

   单块架构使得试用和采用新的技术变得越来越困难。例如，尝试一个新的框架而不重写整个程序是非常困难的，风险又大又
不现实。换句话说，单块架构对于支持大型的，周期长的应用程序并不具备好的灵活性和替换性。


##### 5.扩展困难

  因为所有程序代码都运行在同一个服务器上，导致应用程序的扩展非常困难。如果迫切的需要扩展性，垂直扩展可能是最容
易的（只要有足够的存款）。在大多数情况下，如果舍得砸钱来一个IBM的服务器、Oracle的数据库或者来自EMC的存储设备，不用改变一行代码，至少在一段时间内，一切都会变好的。不幸的是伴随业务的成长，垂直扩展会变得越来越吃力，成本越来越高。这也是为什么在业界，已经很多公司开始尝试去IOE，呼声也变得越来越高的原因之一。

  当考虑水平扩展时，通常的做法是建立一个集群，通过在集群中不断的添加新节点，然后借助前端的负载均衡器，将用户的
请求按照某种算法，譬如轮转法、散列法或者最小连接法等合理的将请求分配到不同的节点上。但是，由于所有程序代码都运行在服务器上的同一个进程中，会导致应用程序的水平扩展成本非常高。譬如说，如果应用程序某部分的功能是内存密集型的，如需要缓存大量数据，而另外一部分功能是CPU密集型的，如需要进行大量的运算，那么每次实施水平扩展，运行该应用的服务器都必须有足够的内存和强劲的CPU来满足需求。因此，鉴于每个服务器都要提供该应用系统所需要的各种资源，基础设施的整体花费可能会非常高。当然，如果某些节点保持状态，如用户登陆后的会话信息等，则增加了水平扩展的难度。

##### 6.对团队结构的影响

   最后，非常微妙的是，随着应用程序的功能越来越多，代码变得越来越复杂，其分层的结构组成也会逐渐映射到研发团队的
结构上。例如，用户体验工程师（UX）更专注负责用户接口部分，业务层开发者则负责建立服务器后端的业务逻辑，数据库工程师和DBA们更关注数据访问组件和数据库。鉴于这些问题，随着时间的推移，不仅代码越来越难以管理，其对团队结构的影响也越来越明显。

综上所述，随着业务的不断扩大，需求的持续增加，单块应用架构已经很难满足业务快速变化的需要。一方面，代码的可维护性、扩展性、灵活性在降低；而另一方面，系统的测试成本、构建成本以及维护成本却在显著增加。因此，随着项目或者产品规模的不断扩大，单块架构应用的改造与重构势在必行。

------------------------------------------------

### 总结

   综上所述，单块应用架构更适合在开发大型产品的初始阶段。或者说，在程序的规模不是太大的时候，单款架构还是最有效
率的一种开发或者架构方式。随着产品的扩大，需求的扩大，单块架构程序变得越来越难理解和维护，对它频繁的改动是一种非常痛苦的、阻碍快速发展的方式。为了修复某个小的缺陷，不得不构建和部署整个程序，耗时的同时而且风险极大。
