---
layout: post
title: "微服务改造企业核心业务系统实践之二 (什么是微服务)"
date: 2014-09-15 15:56
comments: true
categories: 
---

###微服务的出现

多年来，我们一直在技术的浪潮中不断乘风破浪，扬帆奋进，寻找更好的方式构建IT系统。

微服务架构(Micro Service Architect)，是近几年在软件体架构领域里出现的一个新名词。它通过将功能分解到多个独立的服务中以实现对解决方案或者复杂系统的解耦。

其实，微服务的诞生并不是偶然的。领域驱动设计指导我们如何分析并模型化复杂的业务；敏捷方法论帮助我们消除浪费，快速反馈；持续交付帮助我们实现了更快、更可靠、更频繁的软件部署和交付；虚拟化和基础设施自动化则帮助我们简化复杂环境的创建、安装；DevOps活动的流行以及特性团队的出现，使得小团队更加全功能化。这些都是推动微服务诞生必不可少的因素。

<img src="{{ root_url }}/images/microservice/technicial-grow.png" />

###什么是微服务

实际上，微服务本身并没有一个严格的定义。不过从业界的讨论来看，大家已经达成了这样一个共识。

#### 小，且专注于做一件事情
每个服务都是个很小的应用，至于有多小，是一个非常有争议的话题。有人喜欢100行以内，有人赞成1000行以内。数字并不是最重要的，仁者见仁，智者见智，只要团队觉得合适就好。

只关注一个业务功能。这一点和我们平常谈论的面向对象原则中的"Single Responsibility"非常类似，每个服务只做一件事情，并且把它做好。


#### 运行在独立的进程中
每个服务都运行在一个独立的操作系统进程，这意味着不同的服务能被部署到不同的主机上。

#### 轻量级的通信机制
服务和服务之间通过轻量级的机制实现彼此间的通信。所谓轻量级，通常指语言无关、平台无关的这类协议，例如XML，JSON，而不是传统我们熟知的Java RMI或者.Net Remoting等。

#### 松耦合
不需要改变其他依赖，只更改当前服务本身，就可以直接独立部署。这意味着该服务和其他系统或者服务之间呈现松耦合的状态。

因此，微服务是用一组小服务的方式来构建一个应用。服务独立运行在不同的进程中，服务之间通过轻量的通讯机制交互，并且服务可以通过自动化部署方式独立部署。



###微服务的优点

对于一个传统的Web应用而言，通常分为三部分：客户端用户界面（HTML页面和JavaScript程序）、数据库、服务端应用程序。
这个服务端程序负责处理HTTP请求、执行业务逻辑、加载或更新数据库数据、查询和填充HTML页面。因此，它就像是一块大而全的铁板，笨重且不可拆分。这就是典型的单块架构(monolithic)应用。同传统的单块架构系统相比，微服务的优点是多方面的。

<img src="{{ root_url }}/images/microservice/advantages-1.png" />

#### 技术异构性 - 用合适的工具来做合适的事情

不是每个问题都是钉子，也不是每个解决方案都是一个锤子。问题有其具体性，解决方案也应有其针对性。用最适合的技术方案去解决具体的问题，往往会事半功倍。
传统的单块架构系统倾向采用统一的技术平台或方案来解决所有问题。而微服务的异构性，可以针对不同的业务特征选择不同的技术平台或产品，有针对性的解决具体的业务问题。譬如，我们可以使用Go来开发对性能要求较高的部分；使用NodeJS处理I/O密集型的部分，可以使用Ruby开发命令行终端的用户接口部分等。

另外，基于微服务架构，我们也能更敏捷地在遗留系统上尝试新的技术或解决方案。对于单块架构的系统，如果想尝试新的编程语言，数据库或者框架，如果没有完备的功能测试集，很难平滑的完成替换，而且系统规模越大，风险越高。而对于多服务组成的系统，则可以先挑选风险最小的服务作为尝试，快速得到反馈后再决定是否试用于其他服务。这也意味着，如果对一项新技术的尝试失败的话，你尽可以抛弃这个成果，而不会对整个项目带来风险。

类似的，微服务架构的引入为多样化持久保存数据提供可能，我们可以为每个服务选择一个新的适合业务逻辑的数据库系统，比如MongoDB、PostgreSQL。这样做的好处是一方面我们可以根据业务类型（读多还是写多等）来决定使用哪种类型的数据库，另外这样可以减小单个数据库的负载。


#### 易测试，易部署及错误隔离 - 服务之间是松耦合的
对于一个单块架构系统，由于系统是运行在一个进程中，因此系统中任何程序的改变，都需要对整个系统重新测试并部署。譬如，即便提交了1行代码，也需要花时间重新生成整个单块架构产品的发布包，再然后将其作为整体，等待验收测试完成后才能部署到产品环境。

而对微服务架构而言，不同服务之间的打包、测试或者部署等，与其它服务都是完全独立的。如果对某服务做了改动，只需要关注该服务本身的打包、测试以及部署。从这个角度来说，使用微服务后，代码修改、测试、打包以及部署的成本和风险都比单块架构系统低得多。

在我曾经参与的一个项目中，移动平台的网站(Mobile Website)和桌面浏览器访问的主站(Main Website)被构建在一个WAR包中。因此，对于主站的修改，在部署到产品环境之前，除了测试主站外，还必须测试是否影响了移动网站。如果采用微服务的架构，将这两部分分开，构建各自独立的服务。则对于每个服务而言，只需要关注其独立的功能，测试和部署都变得容易了。

微服务架构同时也能提升故障的隔离性。例如，某个服务中的内存泄露只会影响到这个服务自己。其他服务能够继续正常地处理请求。与之形成对比的是，单块架构系统中如果有一个组件出现异常，那么有可能将会拖垮整个系统。


#### 易伸缩性 - 按需扩展不同服务
传统的整体风格的架构在进行水平扩展时也只能基于整个系统进行扩展，无法针对某一个功能模块进行扩展。而服务架构可以完美的解决伸缩性的扩展问题。


#### 帮助优化团队结构

康威定律（Conway's law）指出：
	- organizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations.

	任何设计系统的组织，最终产生的设计等同于组织之内、之间的沟通结构。

传统开发方式中，团队通常是按照工程师所具备的技能专长划分。例如分为UI团队、前端开发团队等，服务端开发团队以及DBA团队等。而微服务架构的开发模式不同于传统方式，它将应用按业务能力来划分为不同的服务，每个服务都要求在对应业务领域的全栈（从前端到后端）软件实现，从界面到数据存储到外部沟通协作等等。 因此团队的组织是跨功能的，包含实现业务所需的全面的技能。你可以围绕多个小团队（如两个披萨原则）组织研发。每个团队只需负责开发和部署一个服务或一组相关的服务。每个团队能够独立于其他的团队开发、部署和扩展他们的服务。

###微服务的缺点

