---
layout: post
title: "[原创]微服务架构设计与实现(1)-什么是微服务"
date: 2015-03-16 22:07
comments: true
categories: 
---

### 概述

多年来，我们一直在技术的浪潮中乘风破浪，扬帆奋进，寻找更优秀的方法来构建IT系统，也一直在积极的学习并观察硅谷或者其他国家的先进IT公司如何以[标新立异]的方式构建或者优化他们的IT系统，来积极应对市场的变化，迅速做出响应，从而为他们的客户提供更多的价值。

微服务架构(Micro Service Architect)是近两年在软件架构领域里出现的一个新名词。它提倡通过对特定业务领域的分析与建模，将复杂的应用分解成小而专、耦合度低并且高度自治的一组服务，由这些服务与服务之间相互协作、相互配合，从而为最终用户或其他系统提供相应的功能。与传统IT行业的'服务'概念不一样的是，每个服务独立运行在不同的进程中，服务之间通过轻量的通讯机制交互，并且每个服务都可以作为独立的业务单元进行测试、部署。

实际上，微服务架构并不是一个全新的概念。早在十几年前，面向服务架构（SOA）概念的提出，就已经在宏观上阐述了类似的思想：对于复杂的企业IT系统，应按照不同的、可重用的粗粒度划分，将服务提供者组织在一起为消费者提供服务。当然，宏观层面的相似并不代表微观世界也就吻合，实际上，鉴于过去十几年IT社区的快速发展，以及持续集成、持续交付、DevOPS，云等技术或者方法论的普及使用，微服务架构的开发、测试、部署以及监控等，相比传统我们提到的SOA，要更接地气，也更容易实施，关于更多SOA与微服务的区别，请参考[X部分]。


虽然微服务架构并不是一个全新的概念，但它的诞生也绝非偶然: 
 - 埃里克·埃文斯的《领域驱动设计》使我们明白通过代码诠释现实世界中领域问题的重要性，并指导我们如何用更好的方法分析、设计并模型化真实世界中复杂的业务；
 - 敏捷方法论代表着高效、灵活，拥抱变化，并帮助我们消除浪费，快速反馈；
 - 持续交付告诉我们构建稳定、可靠的部署流水线对产品交付的重要性，并强调产品价值应该是以小批量、频繁、快速的方式提供给用户，同时明确收集反馈的重要性；
 - 虚拟化技术、私有云，公有云的使用帮助我们简化物理环境的创建、安装、配置；
 - 基础设施自动化( Infrastructure As Code)则为我们提供了一键部署的功能，简化了应用安装、配置的繁琐步骤，并使得水平扩容机制更加容易实现；
 - DevOps文化的流行，以及全功能团队的出现等等，使得小团队的协作与运行更加自组织化并且高效。

如上所示，所有这些都是推动微服务架构诞生的重要因素。


### 定义

实际上，微服务本身并没有一个严格的定义。不过从业界的讨论来看，微服务通常有如下几个特征:
