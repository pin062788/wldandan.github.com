---
layout: post
title: "[原创]微服务架构设计与实现(1) - 什么是微服务"
date: 2015-03-16 22:07
comments: true
categories: 微服务架构
---

### 概述

多年来，我们一直在技术的浪潮中乘风破浪，扬帆奋进，寻找更优秀的方法来构建IT系统，也一直在积极的学习并观察硅谷或者其他国家的先进IT公司如何以不同的思维方式方式构建或者优化他们的IT系统，来积极应对市场的变化，迅速做出响应，从而为他们的客户提供更多的价值。

微服务架构(Micro Service Architect)是近两年在软件架构领域里出现的一个新名词。它提倡通过对特定业务领域的分析与建模，将复杂的应用分解成小而专、耦合度低并且高度自治的一组服务，由这些服务与服务之间相互协作、相互配合，从而为最终用户或其他系统提供相应的功能。与传统IT行业的'服务'概念不一样的是，每个服务独立运行在不同的进程中，服务之间通过轻量的通讯机制交互，并且每个服务都可以作为独立的业务单元进行测试、部署。

实际上，微服务架构并不是一个全新的概念。早在十几年前，面向服务架构（SOA）概念的提出，就已经在宏观上阐述了类似的思想：对于复杂的企业IT系统，应按照不同的、可重用的粗粒度划分，将服务提供者组织在一起为消费者提供服务。当然，宏观层面的相似并不代表微观世界也就吻合，实际上，鉴于过去几十年IT行业的快速发展，以及敏捷、持续集成、持续交付、DevOPS，云等技术或者方法论的深入人心及使用，微服务架构的开发、测试、部署以及监控等，相比我们提到的传统的SOA，要更接地气，更容易构建一套持续改进的软件架构。同时，也更容易实施，关于更多SOA与微服务的区别，请参考[X部分]。


虽然微服务架构并不是一个全新的概念，但它的诞生也绝非偶然: 
 - 埃里克·埃文斯的《领域驱动设计》使我们明白通过代码诠释现实世界中领域问题的重要性，并指导我们如何用更好的方法分析、设计并模型化真实世界中复杂的业务；
 - 敏捷方法论以及其实践，例如极限编程或者Scrum等，提醒着我们要高效、灵活，拥抱变化，并帮助我们消除浪费，建立快速、持续反馈的机制；
 - 持续交付告诉我们构建稳定、可靠的部署流水线对产品交付的重要性，并强调产品价值应该是以小批量、频繁、快速的方式提供给用户；
 - 虚拟化技术、云环境的使用则帮助我们大幅度简化物理环境的创建、安装、配置。
 - 基础设施自动化( Infrastructure As Code)为我们提供了一键部署的功能，同时简化了应用安装、配置的繁琐步骤，并使得水平扩容机制更加容易实现；
 - DevOps文化的流行，以及全功能团队的出现等等，使得小团队的协作与运行更加自组织化并且高效。 
 - ......
等等。当然，还有更多的因素我们无法一一列出。
从上面的因素我们可以看出，无论是从领域设计，还是方法论、工程实践，团队文化等，整个IT行业都在朝着更有效，更能响应市场变化，以及为用户带来更多价值的方向发展。
所以说，微服务概念的提出并不是一个偶然，它是软件架构设计随着IT行业的快速发展，适应市场需求快速变化而发展出的一个产物。

### 定义

实际上，微服务本身并没有一个严格的定义。不过从业界的讨论来看，微服务通常有如下几个显著特征:
1. 小，且专注于做一件事情
	* 多'小'才合适

	每个服务都是很小的应用，至于有多小，是一个非常有趣的话题。有人喜欢100行以内，有人赞成1000行以内。数字并不是最重要的。仁者见仁，智者见智，只要团队觉得合适就好。只关注一个业务功能，这一点和我们平常谈论的面向对象原则中的”单一职责原则”类似，每个服务只做一件事情，并且把它做好。

	* 专注于一件事

2. 运行在独立的进程中
	每个服务都运行在一个独立的操作系统进程中，这意味着不同的服务能被部署到不同的主机上

3. 轻量级的通信机制
	服务和服务之间通过轻量级的机制实现彼此间的通信。所谓轻量级通信机制，通常指基于语言无关、平台无关的这类协议，例如XML、JSON，而不是传统我们熟知的Java RMI或者.Net Remoting等。

4. 松耦合
	不需要改变依赖，只更改当前服务本身，就可以独立部署。这意味着该服务和其他服务之间在部署和运行上呈现相互独立的状态。

综上所述，微服务架构采用多个服务间互相协作的方式构建应用。每个服务独立运行在不同的进程中，服务与服务之间通过轻量的通讯机制交互，并且每个服务可以通过自动化部署方式独立部署。