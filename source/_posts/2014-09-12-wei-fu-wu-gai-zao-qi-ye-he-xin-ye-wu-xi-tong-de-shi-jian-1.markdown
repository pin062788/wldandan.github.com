---
layout: post
title: "微服务改造企业核心业务系统实践之一 (背景与挑战)"
date: 2014-09-12 18:08
comments: true
categories: Microservice
---

###背景

后台支撑系统，是公司内部运作的核心系统，包括客户关系管理系统(CRM)、财务系统(ERP)、计费系统(Billing)和在线支付系统(Payment)四大部分。

随着公司国际化战略的推行以及本土业务的高速发展，公司内部的后台支撑系统已经不堪重负。在吞吐量、稳定性以及可扩展性上都无法满足日益增长的业务需求。

例如，对于每10万元额度的合同，从销售团队准备材料、与客户签单、递交给合同部门，再到合同生效大概需要3.5人天，业务量的快速增长，使得签订合同的成本也急剧增加。另外，国际化战略的有效推行，也使得不同国家的客户总体数量逐渐增多，在线支付的请求量越来越大，经常导致支付系统出现当机，拖慢了企业从产品上线到获取回报的周期。

因此，如何提高企业产品运营的效率，缩短从产品上线到合同签订、再到盈利的周期，并且提高后台支撑系统的可靠性、扩展性以及稳定性成为当前的主要目标。

###挑战

客户关系管理系统是后台支撑系统中重要的一部分。当前的系统，是5年前使用.NET、基于SAGE CRM二次开发的产品。
一方面，系统架构过于陈旧，性能、可靠性无法满足现有的需求。
另一方面，功能繁杂，结构混乱，定制代码与SAGE CRM系统耦合度极高。

<img src="{{ root_url }}/images/microservice/sagecrm.png" />

因此，对于如何改造这类遗留系统，面临的挑战主要有：

	- 组件依赖关系混乱，环境搭建费时费力，各种莫名其妙的错误搞得团队精疲力尽。
	
	- 架构陈旧，代码耦合度高，很多无效的，废弃的代码没有及时删除，增加了开发人员理解、重构代码的难度。

	- 逻辑复杂，缺少测试。面对核心代码的修改，团队缺乏信心。
	
	- 数据库作为集成点，存储过程包含复杂的业务逻辑。

<img src="{{ root_url }}/images/microservice/crm-legacy.png" />


另外，随着人员的变动，熟悉该代码的人也已离职多时，新团队对其望而却步，只能做些周边的修补工作。同时，还要承担着边补测试，边整理逻辑的工作。


###如何应对

在不影响现有系统运行的情况下，我们制定了如下的改造策略：

<img src="{{ root_url }}/images/microservice/crm-transit-microservice.png" />

1. 在现有系统的周边，构建不同功能的服务接口，将之前二次开发、定制的功能逐渐分离出来，在构建这些功能服务接口的过程中，其实也是团队理解、梳理现有业务，并逐步改善系统设计的过程；

2. 利用这些功能服务接口作为代理，解耦原有系统与其调用者之间的依赖；

3. 通过不断定义服务接口，逐渐将原有系统简化，最终将其替换。


有了方针和策略，接下来的主要问题就是如何定义并实现这些服务接口了。
因此，如何划分服务接口，如何构建服务接口，如何管理接口之间的依赖，成为接下来需要研究并解决的问题。基于微服务架构改造之旅由此拉开序幕了。