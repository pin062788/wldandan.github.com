---
layout: post
title: "微服务架构设计与实现(3)"
date: 2015-03-16 22:07
comments: true
categories: MicroService
---

[请勿转载]

# 微服务架构的核心特征

   什么是核心特征，就是当我们谈论同一件事情的时候，那些不同的人们所关注的相同的部分。从业界的讨论来看，微服务通
常有如下几个显著特征:

  - ##### 服务作为组件

  一直以来，软件行业都比较提倡使用组件的方式，构建灵活的即插即用系统，就像我们所看到的现实世界中，由不同零件组的整
体非常灵活。事实上，组件是一个非常抽象的概念，当我们谈论组件的时候，经常会纠结于组件到底代表着什么。为了避免歧义，这里
的组件指应用软件构建中独立的单元，通常它是能够被替代和更新的。
   传统实现组件的方式采用某种确定的编程语言，构建共享库（Libaray）。对于共享库而言，我们知道它是
语言相关、平台相关，并且是和应用程序是运行在同一个进程中的，组件的一点点变化都意味着整个应用程序的更新与重新部署。换句话说，如果你的应用由多个共享库组件组成，那么任何库的变更都将导致整体应用的重新发布。

<!-- More -->

   其实，微服务也可以作为组件。把微服务当成应用程序中的组件，其中一个最主要的好处是微服务可以独立
部署。如果应用由多个共享库组成，那么其只能跑在一个进程中，那么任何库的变更都将导致整体应用的重新发布。但是如果应用程序由多个服务构成，我们可以想像，大部分情况下，每个服务的变更仅需要重新部署相应的服务。当然，这也不是绝对的，比如某些对服务接口的变更就需要其相关服务也发生变化，但微服务架构的目的，是尽量避免这种服务间的耦合并完善服务的交互接口。换句话说，通过服务来实现组件，将应用拆散为一系列的服务，运行在不同的进程中时，任何一个服务的局部变化只需重新部署对应的服务本身。同时，将服务作为组件也可以帮助我们明确的定义出组件的边界，因为服务之间的调用是跨进程的，清晰的边界和职责定义应该是在设计阶段时必须考虑的。

   把服务当成组件的另外一个优点是在组件和组件之间、或者组件和应用程序之间定义了清晰的、跨语言、跨平台的接口。许
多开发语言虽然定义了良好的公共调用接口的机制，也提供了详尽的文档和规范说明，但由于共享库其本身的特性，充分依赖于特定平台、特定语言，因此组件间的耦合度较高。同共享库相比，微服务是通过语言无关、平台无关的远程接口调用，因此不存在这个问题。当然，使用微服务也有它的不足之处，那就是远程调用比进制内部调用更消耗性能，而且远程的接口由于是分布式调用，无疑增加了维护的复杂度。

  - ##### 围绕业务组织团队
  
  在单块应用架构的时代，为了节省成本、快速实现目标，企业或者组织一般都会根
据技能类型的差异化来划分团队。例如UI设计师一般都被划分到用户体验设计团队，而懂服务器端的开发人员，一般都被归类为业务逻辑团队；对于那些精通数据库技能的开发者，一般会在DBA团队中找到他们的身影。实际上，当团队被按照这个策略或者维度划分后，即便是某些简单的需求变更，都有可能导致不同团队之间跨组织、结构的项目协作。
  
  正如康威定律（Conway’s law）提出的，一个组织的设计成果，其结构往往对应
于这个组织中的沟通结构。传统的开发模式采用的分工方式，可能会导致任何功能上的改变，都需要跨团队的沟通和协调。


<img src="http://martinfowler.com/articles/microservices/images/conways-law.png" />

也需要不同团队，例如UX、开发团队、DBA团队们能够互
相协调、考虑成本，或者甚至需要部门之间的协调，来完成这个业务需求的变化。

   康威定律（Conway’s law）指出：一个组织的设计成果，其结构往往对应于这个组织中的沟通结构（organizations 
which design systems are constrained to produce designs which are copies of the communication structures of these organizations）。传统的开发模式采用的分工方式，可能会导致任何功能上的改变，都需要跨团队的沟通和协调。

而微服务架构的开发模式不同于传统方式，它倡导围绕应用程序为核心，按业务能力来划分为不同的团队。每个团队都要求能够对每个服务，将其对应的业务领域的全部功能实现，譬如对于某业务需求的更改，从用户体验界面到业务逻辑实现，再到数据的存储和迁移等。因此团队的组织是跨职能的，会包含实现该业务所需功能的所有技能。近年兴起的全栈工程师正是因为架构和开发模式的转变而出现，当然具备全栈的工程师其实很少，但将不同领域的工程师组织为一个全栈的团队就容易的多。

  - ##### 关注产品而不是项目

   传统的应用开发大部分都是基于项目模式的。什么是项目模式？就是当项目启动后，企业或者组织会从开发
团队中抽出一部分资源、从测试团队中抽出一部分资源，同时也从其他不同的技能团队中抽出不同的资源，组成一个项目团队，然后设置一个时间期限，让大家完成项目。当项目结束后，所有的资源都会被释放，所有人在项目中的职责结束。
   但服务架构倡导的是避免采用这种项目模式，更倾向于让开发团队负责整个产品的生命周期。大家熟知的亚
马逊CEO，曾经说过一句经典的名言，“You build it, you run it”。即对于开发产品的团队而言，产品就是你们的，是团队的，也是每个成员的。大家每个人都有责任、有义务确保产品的发展以及演进。


  - ##### 去中心化

   在第二章我们提到，传统的单块应用架构，倾向于采用统一的技术平台或方案来解决所有问题。其实，我们
知道，在现实生活中，并不是每个问题都是钉子，也不是每个解决方案都是一个锤子。
问题有其具体性，解决方案也应有其针对性。用最适合的技术方案去解决具体的问题，往往会事半功倍。传统的单块架构系统倾向采用统一的技术平台或方案来解决所有问题，而微服务的架构意味着，可以针对不同的业务特征选择不同的技术方案，有针对性的解决具体的业务问题。

   对于单块架构系统，初始的技术选型严重限制将来采用不同语言或框架的能力。如果想尝试新的编程语言
或者框架，没有完备的功能测试集，很难平滑的完成替换，而且系统规模越大，风险越高。而基于微服务架构，使我们更容易在系统上尝试新的技术或解决方案。譬如说，可以先挑选风险最小的服务作为尝试，快速得到反馈后再决定是否试用于其他服务。这也意味着，即便对一项新技术的尝试失败，也可以抛弃这个方案，并不会对整个产品带来风险。


  - ##### 独立业务数据


  - ##### 基础设施自动化

在过去的几年里，随着云技术的大规模推广与使用，部署和运维的复杂性在大幅度降低。同时，由于持续集成、持续交付理论与实践的成熟与推广，很多团队都开始在构建软件的过程中，使用持续提倡的基础设施自动化技术。因为这不是关于介绍持续交付的书籍，我们更多的是提醒大家，注意微服务的关键特征。记住，持续交付的目的之一是使部署无聊，所以无论是其一个或三个应用程序，只要它还是无聊也没关系。

  - ##### 演进式架构设计

   微服务的实践者，通常都来自演进式的背景，并且清楚的明白，将大的应用程序分解成微服务，能够帮助开发人员更有效的控制的
需求变化，并且不会降低由于变化导致的速度放缓。变更控制并不一定意味着变化的减少，使用正确的方式和和工具，可以帮助我们频繁的，快速的以及良好的掌控软件的变更。

   当我们试图将一个单块应用架构分解成由一组服务组成的系统时，我们会面临艰难的选择。哪种方案才是合理的？那种方案才是最
正确的？决定我们分解单块应用架构的原则是什么？实际上，作为组件，最主要的特点是可以被独立的更换和升级。


这些微服务的核心特征，反映了随着微服务架构的出现，人们讨论微服务架构时候，那些不同的人们所关注的相同的问题。所以说，本章提到的7个重点，是理解微服务重要的一步。