<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Microservices | Happy Coding, Happy Life]]></title>
  <link href="http://wldandan.github.com/blog/categories/microservices/atom.xml" rel="self"/>
  <link href="http://wldandan.github.com/"/>
  <updated>2016-11-18T00:04:45+08:00</updated>
  <id>http://wldandan.github.com/</id>
  <author>
    <name><![CDATA[wldandan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[微服务实战(3) - Spring Boot 101]]></title>
    <link href="http://wldandan.github.com/blog/2016/11/15/microservices-in-action-spring-boot-101/"/>
    <updated>2016-11-15T17:57:00+08:00</updated>
    <id>http://wldandan.github.com/blog/2016/11/15/microservices-in-action-spring-boot-101</id>
    <content type="html"><![CDATA[<p>过去的几个月，我作为独立咨询师，为多个传统企业提供了微服务架构的培训、咨询以及交付工作。在这些企业中，大部分的开发者对微服务的理解，以“银弹观念”为主。实际上，传统企业在过去多年的业务积累中，由于组织架构、业务发展和市场竞争等综合因素，技术体系相对封闭，缺乏快速交付的理念。因此，微服务的出现，加之社区的热捧，导致这种现象出现也是比较能理解的。</p>

<p>经过2015年的快速普及，微服务的优势被越来越多的传统组织和企业所认可，但由于架构相关的知识本身比较抽象，虽然各大会议上有很多互联网公司的案例分享，但开发者似乎依然很难全面了解微服务架构。</p>

<p>所以，希望通过本系列的文章，以一个模拟的案例为背景，以持续交付和DevOps为主线，帮助初学者理解微服务架构，并能通过动手实验，了解相关的实践以及方法论。</p>

<!-- More -->


<h2>为什么是Spring Boot</h2>

<p>在Java开发领域，估计没有多少兄弟不知道Spring，当年的SSH组合，风靡社区，几乎成为J2EE 程序开发的标配。</p>

<p>另外，Spring对诸多企业特性的强大支持，为构建Java的企业应用提供了<code>全家桶</code>的解决方案。</p>

<p><img src="/images/microservice-in-action-with-spring/spring-boot/spring-io-600-450.png" /></p>

<p>对于现代Java开发，尤其是以微服务为主的应用，虽然有<a href="https://dropwizard.github.io/">DropWizard</a>、<a href="https://ee.kumuluz.com/">KumuluzEE</a>等微服务框架的诞生，但Spring Boot借助极致的<code>Convention Over Configuration</code>，加上对<code>Spring Framework</code>的无缝支持，被社区普遍看好。</p>

<p>在今年10月中旬结束的<a href="https://jaxlondon.com/jax-awards/">2016 JAX Java Innovation</a>评选中，Spring Boot一举拔得头筹，而去年Java领域的这个奖项是颁给了著名的<a href="https://netflix.github.io/">Netflix OSS</a>，足以证明Spring Boot在社区的影响力。</p>

<p><img src="/images/microservice-in-action-with-spring/spring-boot/jax-award-spring-boot-600-450.png" /></p>

<h2>Spring Boot的优势</h2>

<ul>
<li><code>快速构建</code>可运行的应用

<ul>
<li><code>无XML配置</code></li>
<li>支持<code>内嵌</code>WebServer(Tomcat/Jetty/Undertow)</li>
<li>通过<code>注解</code>的方式，一行代码启动应用</li>
</ul>
</li>
<li><code>自动配置</code>和<code>装载机制</code>

<ul>
<li>使用Starter</li>
<li>自动配置装载依赖</li>
</ul>
</li>
<li>运维接口友好

<ul>
<li><code>Metrics/health</code>显示健康监控状态</li>
<li><code>Trace/dump</code>显示调用/调试信息</li>
</ul>
</li>
</ul>


<h2>Spring Boot核心</h2>

<h3>简单的说，Spring Boot的核心，主要包括两大部分：</h3>

<blockquote><p>1.Starter</p></blockquote>

<p>Starter负责将申明的依赖Jar包导入到当前ClassPath。</p>

<p>每个Starter都提供一个<code>spring.providers文件</code>，申明当前Starter依赖的Jar包。</p>

<p>譬如，<code>Spring-boot-starter-web</code>中的<code>spring.providers文件</code>描述的依赖如下所示：</p>

<p><code>
provides: spring-webmvc,spring-web,jackson-databind
</code></p>

<p>包括<code>spring-webmvc</code>，<code>spring-web</code>，<code>jackson-databind</code>，分别提供mvc，web和JSON解析绑定的功能。</p>

<p>欲了解更多的Starter，请移步<a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-starters">官方列表</a></p>

<blockquote><p>2.AutoConfiguratioin</p></blockquote>

<p>AutoConfiguratioin根据<code>ConditionalOnXxx</code>条件，使用<code>@Bean</code>注解，完成对Bean的创建和组装。</p>

<p>根据不同的<code>ConditionalOnXxx</code>，AutoConfiguration可以根据合适的场景创建并组装Bean。</p>

<p>譬如
<code>
ConditionalOnMissingBean(A.class)
</code></p>

<blockquote><p>表示当前指定的A实例不存在，才创建@Bean.</p></blockquote>

<p><code>
ConditionalOnWebApplication
</code></p>

<blockquote><p>表示当前是在Web Application才创建@Bean</p></blockquote>

<p>Java Web中我们经常使用<code>HttpEncodingAutoConfiguration</code>，完成UTF8的转码。如下是SpringBoot中，HttpEncodingAutoConfiguration的部分实现：</p>

<blockquote><p>仅当ApplicationContext中没有CharacterEncodingFilter的时候，才会创建<code>CharacterEncodingFilter</code></p></blockquote>

<p>```</p>

<pre><code>@Bean
@ConditionalOnMissingBean(CharacterEncodingFilter.class)
public CharacterEncodingFilter characterEncodingFilter() {
    CharacterEncodingFilter filter = new OrderedCharacterEncodingFilter();
    filter.setEncoding(this.properties.getCharset().name());
    filter.setForceRequestEncoding(this.properties.shouldForce(Type.REQUEST));
    filter.setForceResponseEncoding(this.properties.shouldForce(Type.RESPONSE));
    return filter;
}
</code></pre>

<p>```</p>

<blockquote><p>所以, 我对SpringBoot的理解为，如下两个核心点(配合起来，天下无敌....)</p></blockquote>

<ul>
<li><code>Starter打包提供相关的包依赖，加载到ClassPath</code></li>
<li><code>EnableAutoConfiguration借助ConditionalOnXxx条件，创建并配置Bean的依赖关系</code></li>
</ul>


<p>关于更多<code>Conditional</code>的细节，请查看包
<em>org.springframework.boot.autoconfigure.condition</em>中的具体实现，其列表如下图所示：</p>

<p><img src="/images/microservice-in-action-with-spring/spring-boot/spring-boot-conditional-xxx-600-450.png" /></p>

<h3>另外，每个SpringBoot应用上都会加标签@SpringBootApplication</h3>

<p>这个标签是SpringBoot应用的核心标签，主要包括三部分子：</p>

<ul>
<li>@Configuration</li>
</ul>


<p>Spring3.0引入@Configuration(Java配置)，使用Java配置简化XML配置。</p>

<p>譬如以前我们通常使用类似如下XML配置Spring Bean</p>

<p>```
&lt;beans xmlns="http://www.springframework.org/schema/beans"</p>

<pre><code>xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"&gt;

&lt;bean id="helloBean" class=“com.microservice.training.HelloWorldImpl"&gt;
</code></pre>

<p></beans>
```</p>

<p>通过使用Java Configuration，声明当前类是一个配置类， 相当于声明一个Spring配置的XML文件</p>

<p>```
@Configuration
public class AppConfig {</p>

<pre><code>@Bean(name="helloBean")
public HelloWorld helloWorld() {
    return new HelloWorldImpl();
}
</code></pre>

<p>}
```</p>

<ul>
<li>@EnableAutoConfiguration</li>
</ul>


<p>它帮助我们加载当前Spring Boot中META-INF/spring.factories，并使用其中的*AutoConfiguration</p>

<p><code>
HttpEncodingAutoConfiguration
RabbitAutoConfiguration
EmbeddedServletContainerAutoConfiguration
……
</code></p>

<p>每个AutoConfiguration都会根据其中的Condition条件，在合适的场景完成对相关Bean的创建</p>

<p><code>
@ConditionalOnBean //容器里有指定Bean存在
@ConditionalOnClass //类路径下有指定Class存在
@ConditionalOnWebApplication //当前项目是Web项目
……
</code></p>

<ul>
<li>@ComponentScan</li>
</ul>


<p>它定义Spring了自动加载Bean的根路径，是Spring Framwork中较早的一个标签，这里就不赘述了。</p>

<h2>快速构建Spring Boot应用</h2>

<p>Spring Boot提供了方便的项目创建方式，使得我们可以快速创建基于SpringBoot的项目：</p>

<ul>
<li>使用<a href="http://sdkman.io/">命令行CLI</a></li>
<li>使用<a href="start.spring.io">Initializr</a></li>
<li>使用IDE(IDEA，Spring Tool Suite等)</li>
</ul>


<h2>总结</h2>

<blockquote><p>本部分介绍了SpringBoot的核心，并提到了快速创建SpringBoot应用的方式，通过这部分内容，能够帮助大家完成<code>SpringBoot从0到1的过程</code> :)</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微服务实战(2) - 目标系统]]></title>
    <link href="http://wldandan.github.com/blog/2016/11/15/microservices-in-action-simulation/"/>
    <updated>2016-11-15T14:28:00+08:00</updated>
    <id>http://wldandan.github.com/blog/2016/11/15/microservices-in-action-simulation</id>
    <content type="html"><![CDATA[<p>过去的几个月，我作为独立咨询师，为多个传统企业提供了微服务架构的培训、咨询以及交付工作。在这些企业中，大部分的开发者对微服务的理解，以“银弹观念”为主。实际上，传统企业在过去多年的业务积累中，由于组织架构、业务发展和市场竞争等综合因素，技术体系相对封闭，缺乏快速交付的理念。因此，微服务的出现，加之社区的热捧，导致这种现象出现也是比较能理解的。</p>

<p>经过2015年的快速普及，微服务的优势被越来越多的传统组织和企业所认可，但由于架构相关的知识本身比较抽象，虽然各大会议上有很多互联网公司的案例分享，但开发者似乎依然很难全面了解微服务架构。</p>

<p>所以，希望通过本系列的文章，以一个模拟的案例为背景，以持续交付和DevOps为主线，帮助初学者理解微服务架构，并能通过动手实验，了解相关的实践以及方法论。</p>

<!-- More -->


<h2>目标系统</h2>

<blockquote><p>构建一个用户查看活动、报名活动、接收通知的系统</p>

<ul>
<li>匿名用户可查看活动列表</li>
<li>匿名用户可以查看活动详情</li>
<li>匿名用户可以查看相关活动推荐和评论</li>
<li>用户登陆成功后完成报名</li>
<li>报名成功，用户获取通知</li>
</ul>
</blockquote>

<h2>服务定义</h2>

<blockquote><p>关于服务的划分，是一个非常有深度的话题，与业务场景、技术实现、团队能力有着密不可分的关系。
从方法论上有：</p>

<ul>
<li>根据<a href="https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215">DDD</a>，包括业务上下文、事件驱动、读写分离等</li>
<li>根据名词类对象，譬如商品、订单等</li>
<li>根据动词类行为，譬如支付，预订等</li>
<li>其他切入点</li>
</ul>


<p>在这个模拟场景中，为了保持简洁，我假定使用名词和动词进行划分，包括如下：</p></blockquote>

<ul>
<li><code>活动服务Event-service</code>(提供活动的列表和活动详情的相关数据）</li>
<li><code>推荐服务Recommendation-service</code>(提供与某个活动相关的推荐信息)</li>
<li><code>评论服务Review-service</code>(提供与某个活动相关的评论信息)</li>
<li><code>活动聚合服务Event-composite-service</code>(聚合服务 - 提供某个活动及其相关的推荐、评论信息</li>
<li><code>报名服务Enroll-service</code>(为登录用户提供报名)</li>
<li><code>通知服务Notification-service</code>(用户报名成功后获取通知)</li>
</ul>


<blockquote><p>该活动报名系统的应用架构图如下：</p></blockquote>

<p><img src="/images/microservice-in-action-with-spring/events-system-architecture-600-450.png" /></p>

<h2>服务实现</h2>

<ul>
<li>Java 8/Gradle 2.13</li>
<li>SpringBoot 1.4.2 / SpringCloud Camden.SR2</li>
<li>MongoDB 使用Document存储活动数据</li>
<li>REST/HAL/HAL-Browser 定义服务之间通信的接口</li>
<li>JVM-Pact 实现契约测试,服务间接口的测试</li>
</ul>


<h2>服务支撑组件</h2>

<ul>
<li>Netflix OSS Eureka 实现服务注册</li>
<li>Spring Cloud Config 实现服务的配置</li>
<li>Hystrix/Turbine 实现断路器</li>
<li>Zuul 实现API网关</li>
<li>Spring Cloud Security 实现安全</li>
</ul>


<h2>基础设施</h2>

<ul>
<li>ELK 提供服务的日志的聚合服务</li>
<li>Prometheus 提供服务的监控与告警</li>
<li>Jenkins 2.0搭建系统的持续交付流水线</li>
<li>Docker提供服务的打包以及发布</li>
<li>Rancher提供Docker的轻量级管理方案</li>
</ul>


<blockquote><p>该活动报名系统的微服务生态系统图如下：</p></blockquote>

<p><img src="/images/microservice-in-action-with-spring/microservices-eco-system-adoption-600-450.png" /></p>

<h2>总结</h2>

<p>  通过理论+模拟+实战的方式，梳理微服务的生态系统，并以持续交付和DevOps的实施为主线，体系化的形成微服务从0到1的学习过程。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微服务实战(1) - 内容大纲]]></title>
    <link href="http://wldandan.github.com/blog/2016/11/11/microservices-in-action-outline/"/>
    <updated>2016-11-11T14:28:00+08:00</updated>
    <id>http://wldandan.github.com/blog/2016/11/11/microservices-in-action-outline</id>
    <content type="html"><![CDATA[<script src="https://cdn1.lncld.net/static/js/av-mini-0.6.10.js"></script>


<script src="http://jerry-cdn.b0.upaiyun.com/hit-kounter/hit-kounter-lc-0.2.0.js"></script>


<p>过去的几个月，我作为独立咨询师，为多个传统企业提供了微服务架构的培训、咨询以及交付工作。在这些企业中，大部分的开发者对微服务的理解，以“银弹观念”为主。实际上，传统企业在过去多年的业务积累中，由于组织架构、业务发展和市场竞争等综合因素，技术体系相对封闭，缺乏快速交付的理念。因此，微服务的出现，加之社区的热捧，导致这种现象出现也是比较能理解的。</p>

<p>经过2015年的快速普及，微服务的优势被越来越多的传统组织和企业所认可，但由于架构相关的知识本身比较抽象，虽然各大会议上有很多互联网公司的案例分享，但开发者似乎依然很难全面了解微服务架构。</p>

<p>所以，希望通过本系列的文章，以一个模拟的案例为背景，以持续交付和DevOps为主线，帮助初学者理解微服务架构，并能通过动手实验，了解相关的实践以及方法论。</p>

<!-- More -->


<h2>核心思路</h2>

<ul>
<li>以<code>微服务生态系统</code>和<code>持续交付</code>为指导原则</li>
<li>以<code>模拟案例实战</code>为主，并使<code>用SpringBoot</code>和<code>Spring Cloud</code>实现服务</li>
<li>分为<code>服务构建</code>与<code>服务实施</code>两个专题，包括<code>应用架构</code>，<code>部署模型</code>和<code>交付流水线</code></li>
</ul>


<h2>主要亮点</h2>

<h4>1.全面了解微服务架构的理论基础</h4>

<ul>
<li>微服务的定义与认识误区</li>
<li>微服务的核心原则以及同SOA的关系</li>
<li>微服务的<code>持续交付体系</code></li>
</ul>


<h4>2.基于微服务生态系统，搭建模拟案例</h4>

<ul>
<li>通过案例理解<code>微服务架构生态系统</code></li>
<li>掌握<code>REST &amp; HAL &amp; HAL Browser</code>的使用方式</li>
<li>掌握<code>Spring Boot</code>的核心与使用</li>
<li>熟悉<code>Spring Cloud</code>的服务支撑组件</li>
</ul>


<blockquote><p>微服务生态系统</p></blockquote>

<p><img src="/images/microservice-in-action-with-spring/microservices-eco-system-600-450.png" /></p>

<h4>3.理解微服务的高级话题</h4>

<ul>
<li>使用<code>PACT契约测试</code>验证服务接口</li>
<li>使用<code>OAuth</code>与<code>JWT</code>实现服务的安全</li>
<li><code>RESTful API</code>设计相关</li>
</ul>


<blockquote><p>基于消费者驱动的契约测试</p></blockquote>

<p><img src="/images/microservice-in-action-with-spring/pact-600-450.png" /></p>

<h4>4.理解实施微服务与DevOps(基于Docker)</h4>

<ul>
<li>建立<code>Docker私有仓库</code>，并将服务发布成Docker镜像</li>
<li>使用<code>Docker搭建Jenkins</code>持续交付流水线</li>
<li>以<code>Pipeline as Code</code>的方式管理流水线</li>
<li>使用<code>ELK实现日志聚合</code>的实践</li>
<li>使用<code>Prometheus</code>实现监控告警的实践</li>
<li>使用<code>Rancher</code>完成服务Docker镜像的部署</li>
</ul>


<blockquote><p>部署模型图</p></blockquote>

<p><img src="/images/microservice-in-action-with-spring/events-system-deployment-600-450.png" /></p>

<blockquote><p>持续交付流水线</p></blockquote>

<p><img src="/images/microservice-in-action-with-spring/events-system-cd-600-450.png" /></p>

<h2>总结</h2>

<p>  通过理论+模拟+实战的方式，梳理微服务的生态系统，并以持续交付和DevOps的实施为主线，体系化的形成微服务从0到1的学习过程。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微服务实战(0) - 聊聊开篇]]></title>
    <link href="http://wldandan.github.com/blog/2016/11/03/microservices-in-action-introduction/"/>
    <updated>2016-11-03T14:28:00+08:00</updated>
    <id>http://wldandan.github.com/blog/2016/11/03/microservices-in-action-introduction</id>
    <content type="html"><![CDATA[<p>过去的几个月，我作为独立咨询师，为多个传统企业提供了微服务架构的培训、咨询以及交付工作。在这些企业中，大部分的开发者对微服务的理解，以“银弹观念”为主。实际上，传统企业在过去多年的业务积累中，由于组织架构、业务发展和市场竞争等综合因素，技术体系相对封闭，缺乏快速交付的理念。因此，微服务的出现，加之社区的热捧，导致这种现象出现也是比较能理解的。</p>

<p>经过2015年的快速普及，微服务的优势被越来越多的传统组织和企业所认可，但由于架构相关的知识本身比较抽象，虽然各大会议上有很多互联网公司的案例分享，但开发者似乎依然很难全面了解微服务架构。</p>

<p>所以，希望通过本系列的文章，以一个模拟的案例为背景，以持续交付和DevOps为主线，帮助初学者理解微服务架构，并能通过动手实验，了解相关的实践以及方法论。</p>

<!-- More -->


<h2>为什么搞这么个系列</h2>

<h4>1.微服务涉及内容广泛，学习成本高</h4>

<p>微服务架构提倡将<code>单一应用程序</code>划分成<code>一组小的服务</code>，<code>每个服务运行在独立的进程中</code>，服务间<code>采用轻量级的通信机制</code>互相协作(通常是基于 HTTP 协议的 RESTful API )，每个服务都围绕着具体业务进行构建，并且能被独立的<code>开发、测试、构建、部署和交付</code>。</p>

<p>客观来说，微服务架构所涉及的内容，已经不仅仅是<code>架构本身</code>，还包括了<code>持续集成</code>、<code>持续交付</code>、<code>自动化测试</code>、<code>部署/运维、监控</code>以及<code>DevOps</code>等多个方面，这些方面互相配合、相辅相成，才能在微服务实施的过程中展现威力。</p>

<p>一个完整的微服务系统，在实施的过程中，可能还要考虑服务的<code>公共支撑部分</code>，包括但不限于：</p>

<ul>
<li><code>日志聚合</code>(将不同服务实例上的日志聚合起来，便于分析、统计和定位问题)</li>
<li><code>监控</code>和<code>告警</code>(监控每个服务的状态，必要时产生告警)</li>
<li>服务的<code>注册和发现</code>机制</li>
<li>服务的<code>认证</code>和<code>鉴权</code></li>
<li><code>服务构建</code>和<code>打包机制</code></li>
<li>服务间的<code>接口测试</code></li>
<li><code>持续集成</code>/<code>持续交付流水线</code></li>
<li><code>服务依赖</code>关系管理</li>
<li>......</li>
</ul>


<p>对于这么多的内容，如果能基于模拟场景的理解与练习，再借鉴各大会议上诸多公司的微服务实施案例，能够快速理解并开始尝试。</p>

<h3>2.《微服务与实践》一书，该更新更新了</h3>

<p>2015年4月，我开始撰写《微服务架构与实践》一书，当时国内微服务架构的概念还谈的比较少，所以《微服务架构与实践》侧重讲了微服务的理论基础和诞生背景，并分享了我在ThoughtWorks就职期间，实现微服务的工作方式（我们以持续交付和DevOps为核心，构建服务开发模板，并基于AWS实现快速发布，快速监控，快速反馈）。同时，也探讨了我们如何将遗留系统改造成微服务架构的策略和步骤，但由于精力有限，很多细节无法一一展开讨论。</p>

<p>另外，书中的大部分例子都是以<code>Ruby和AWS</code>为主，很多读者也提出了建议，希望给出采用Java实现的例子，更容易理解和使用。</p>

<p>当今时代，技术发展的速度越来越快，诞生的框架、工具越来越多，虽然有心更新书的内容，但时间和精力都无法快速更新并发布新版，所以，这次希望能通过这个系列，先将过去的一些实践细化，包括DevOps、持续集成、持续交付以及使用Pact等实践，并采用Java(基于Spring Boot/Spring Cloud的快速发展)实现一个模拟的案例。</p>

<h3>3. 为感兴趣的传统开发者提供可用的案例</h3>

<p>过去两年微服务的快速发展，已经有很多传统企业开始尝试使用微服务解耦业务系统。传统企业和互联网企业的业务形态不一样，互联网公司业务变化快，响应速度快，组织愿意积极尝试开源的工具和方法论，降低交付成本和缩短交付周期。互联网领域中，大部分的产品，本身就是基于分布式系统构建，所以微服务的概念只是新瓶装旧酒。</p>

<p>而传统企业在过去多年的业务运作积累中，综合多种因素（组织结构、业务发展等），技术体系相对封闭，缺乏持续交付的理念。如果光有微服务的理论基础，和业界的成功案例，不动手尝试持续交付、DevOps等，很难有深刻的理解。</p>

<p>Github上微服务相关的实现Repo蛮多，但作为完整系列的不多。</p>

<p>所以，基于这些原因，结合过去为企业实施微服务架构培训的内容，也希望能输出这个系列。</p>

<h2>受众用户是谁</h2>

<ul>
<li><p>本系列的受众用户，主要是年轻(1~3年)的Java开发者、传统应用的IT架构师，以及对微服务感兴趣的童鞋们。</p></li>
<li><p>希望通过本系列，能将微服务、持续交付、Docker以及DevOps等技术，作为整体输出，帮助大家缩短系统了解微服务的成本。</p></li>
</ul>


<h2>数据说话</h2>

<p>关于IT社区对微服务的关注度和市场的需求数据，请看下图，一个字🔥。</p>

<p><img src="/images/microservice-in-action-with-spring/google_trends.png" /></p>

<blockquote><p>图的上部分是Google Trends上关于<code>Microservice</code>的增长趋势。</p>

<p>图的左下部分是<code>Microservice</code>相关关键字的增长速度，<code>Breakout</code>表明在搜索的区间内，其增长的幅度超过5000%。</p>

<p>图的右下部分是Indeed.com中对于<code>Microservice</code>的市场招聘需求的增长曲线。(趋势来了，挡都挡不住，提升个人竞争力，赶紧哈~ 😝)</p></blockquote>

<h2>总结</h2>

<blockquote><p>好的，准备进入正题.....</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解析微服务架构]]></title>
    <link href="http://wldandan.github.com/blog/2015/03/17/microservice-design-and-implementation/"/>
    <updated>2015-03-17T11:13:00+08:00</updated>
    <id>http://wldandan.github.com/blog/2015/03/17/microservice-design-and-implementation</id>
    <content type="html"><![CDATA[<p>过去的1年多，一直在助力澳洲最大的房地产互联网门户，研究并使用微服务架构改造其复杂的遗留系统。鉴于此，准备开个系列，讲讲我个人眼中的微服务是神马样的，它的概念，优缺点，为什么我们要使用它，以及在使用微服务的实践过程中，从开发、测试、部署、运维等几个方面相比以前方式有什么不同；同时，分享一下我们在微服务实践过程中的经验和踩过的那些坑。</p>

<!-- More -->


<p>目录大概如下</p>

<ul>
<li><h3>理论篇</h3>

<ul>
<li><h5>单块架构应用以及挑战</h5></li>
<li><h5>什么是微服务</h5></li>
<li><h5>微服务的核心特征</h5></li>
<li><h5>微服务的优缺点</h5></li>
<li><h5>微服务的适用场景</h5></li>
<li><h5>微服务与SOA</h5></li>
<li><h5>微服务诞生的催化剂</h5></li>
</ul>
</li>
<li><h3>实践篇</h3>

<ul>
<li><h5>麻雀虽小，五脏俱全</h5></li>
<li><h5>实现一个服务</h5></li>
<li><h5>微服务开发模板的重要性</h5></li>
<li><h5>不仅仅是REST</h5></li>
<li><h5>消费者驱动的契约测试</h5></li>
<li><h5>如何划分微服务</h5></li>
<li><h5>微服务的依赖管理</h5></li>
<li><h5>微服务与DevOPS</h5></li>
<li><h5>微服务与监控</h5></li>
</ul>
</li>
<li><h3>案例篇</h3>

<ul>
<li><h5>合同管理系统</h5></li>
<li><h5>市场定价系统</h5></li>
<li><h5>信息搜索系统</h5></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
